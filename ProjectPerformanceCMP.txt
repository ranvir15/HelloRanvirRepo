ProjctPerformance.cmp::::::::::::::::



<aura:component controller="customLookUpController" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" access="global" >
    
    <!--declare attributes--> 
    <aura:attribute name="selectedRecord" type="sObject" default="{}" description="Use,for storing SELECTED sObject Record"/>
    <aura:attribute name="listOfSearchRecords" type="List" description="Use,for store the list of search records which returns from apex class"/>
    <aura:attribute name="SearchKeyWord" type="string"/>
    <aura:attribute name="objectAPIName" type="string" default=""/>
    <aura:attribute name="IconName" type="string" default=""/>
    <aura:attribute name="label" type="string" default=""/>
    <aura:attribute name="Message" type="String" default=""/>
    <aura:attribute name="WhereClause" type="String" default="" />
    <aura:attribute name="CSATValue" type="Integer" default=""/>
    <aura:attribute name="projectScope" type="Integer" default=""/>
    <aura:attribute name="projectSchedule" type="Integer" default=""/>
    <aura:attribute name="taskSchedule" type="Integer" default=""/>
    <aura:attribute name="qEffort" type="Integer" default=""/>
    <aura:attribute name="costOfQuality" type="Integer" default=""/>
    <aura:attribute name="budget" type="Integer" default=""/>
    <aura:attribute name="documents" type="Integer" default=""/>
    <aura:attribute name="onTimeInvoice" type="Integer" default=""/>
    <aura:attribute name="gMargin" type="Integer" default=""/>
    <aura:attribute name="BudgetedHours" type="Decimal" default=""/>
    <!-- KPI Help Text Map -->
    <aura:attribute name="kpiMapHelpTexts" type="Map" default=""/>
    <!-- KPI Target Map -->
    <aura:attribute name="kpiMapTargets" type="Map" default=""/>
    <!-- HelpText for KPI Parameters -->
    <aura:attribute name="csatHelpText" type="String" default=""/>
    <aura:attribute name="scopeHelpText" type="String" default=""/>
    <aura:attribute name="projectScheduleHelpText" type="String" default=""/>
    <aura:attribute name="taskScheduleHelpText" type="String" default=""/>
    <aura:attribute name="qualityEffortHelpText" type="String" default=""/>
    <aura:attribute name="costOfQualityHelpText" type="String" default=""/>
    <aura:attribute name="budgetHelpText" type="String" default=""/>
    <aura:attribute name="grossMarginHelpText" type="String" default=""/>
    <aura:attribute name="onTimeInvoiceHelpText" type="String" default=""/>
    
    <aura:attribute name="CSATValueActual" type="Decimal" default=""/>
    <aura:attribute name="projectScopeActual" type="Decimal" default=""/>
    <aura:attribute name="projectScheduleActual" type="Decimal" default=""/>
    <aura:attribute name="taskScheduleActual" type="Decimal" default=""/>
    <aura:attribute name="qEffortActual" type="Decimal" default=""/>
    <aura:attribute name="costOfQualityActual" type="Decimal" default=""/>
    <aura:attribute name="budgetActual" type="Decimal" default=""/>
    <aura:attribute name="documentsActual" type="Decimal" default=""/>
    <aura:attribute name="onTimeInvoiceActual" type="Decimal" default=""/>
    <aura:attribute name="gMarginActual" type="Decimal" default=""/>
    <!-- For Lightning Path -->
    <aura:attribute name="recordId" type="String"/>
    <aura:attribute name="variant" type="String" default="non-linear"/>
    <aura:attribute name="hideUpdateButton" type="Boolean" default="false"/>
    <aura:attribute name="showDetailsMap" type="Map" />
    <aura:attribute name="showDetails" type="list" />
    <aura:attribute name="KPIParameter" type="String"/>
    <!--declare events hendlers--> 
    <aura:attribute name="showStep4" type="Boolean" default="true"/>
    
     <aura:handler name="init" action="{!c.getKPIDetails}" value="{!this}"/>
    
    <aura:handler name="oSelectedRecordEvent" event="c:selectedsObjectRecordEvent" action="{!c.handleComponentEvent}"/>
    <aura:method name="clearValue" action="{!c.clear}" access="PUBLIC"></aura:method>
    
    <!-- https://www.lightningdesignsystem.com/components/lookups/ --> 
    <!-- Open Modal box -->
    <aura:attribute name="isOpen" type="boolean" default="false"/>
    
    <body text="#000000">    <div>
    <aura:if isTrue="{!v.isOpen}">
        <!--###### MODAL BOX Start######--> 
        <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open" style="width:100%;">
            <div class="slds-modal__container" style="width: 60%;">
                <!-- ###### MODAL BOX HEADER Start ######-->
                <header class="slds-modal__header" style="border-top-right-radius:1.25rem;border-top-left-radius:1.25rem;">
                    <lightning:buttonIcon iconName="utility:close"
                                          onclick="{! c.closeModel }"
                                          alternativeText="OK"
                                          variant="bare-inverse"
                                          class="slds-modal__close"/>
                    <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate"><h1>KPI Parameter : {!v.KPIParameter}</h1></h2>
                </header>
                <!--###### MODAL BOX BODY Part Start######-->
                <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                    <p><b>
                        <aura:iteration items="{!v.showDetails}" var="item">
                        <h4 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate"><h1><b>{!item}</b></h1></h4>    
                        <br/>
                        </aura:iteration> 
                        </b>
                    </p>
                </div>
                <!--###### MODAL BOX FOOTER Part Start ######-->
                <footer class="slds-modal__footer" style="border-bottom-right-radius:1.25rem;border-bottom-left-radius:1.25rem;">
                    <lightning:button variant="neutral" 
                                      label="OK"
                                      title="OK"
                                      onclick="{! c.closeModel }"/>
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
        <!--###### MODAL BOX Part END Here ######-->
    </aura:if>
    <div style="width:100%;">
        <div class="prog_bar slds-m-horizontal_small">
            <p style="display:inline-block;width:50%;">0</p><p style="display:inline-block;width:50%;text-align:right;">750</p>
            
            <p class="total_value" id="totalVal" style="text-align:right;"></p>
           
            <progress id="myProgress" value="0" max="750" class="my_progress_bar">
            </progress>
            
               
            <p id="onestar" style="display:inline-block;width:20%;text-align:right;">
                1<span style='font-size:25px;' class="onestar">&#9733;</span>
            </p>
            <p id="onestar" style="display:inline-block;width:20%;text-align:right;">
                2<span style='font-size:25px;' class="twostar">&#9733;</span>
			</p>
            <p id="onestar" style="display:inline-block;width:20%;text-align:right;">
                3<span style='font-size:25px;' class="threestar">&#9733;</span>
            </p>
            <p id="onestar" style="display:inline-block;width:20%;text-align:right;">
                4<span style='font-size:25px;' class="fourstar">&#9733;</span>
            </p>
            <p id="onestar" style="display:inline-block;width:20%;text-align:right;">
                5<span style='font-size:25px;' class="fivestar">&#9733;</span>
            </p>
        </div>
        <div class="slds-m-around_medium">
            <h1 style="font-size: 2em;">KPI Details:</h1><br/>
            <table class="slds-table slds-table_cell-buffer slds-table_bordered table_desgin slds-max-medium-table_stacked-horizontal slds-border_left slds-border_right" style="border-radius:10px;">
                <thead border="0">
                    <tr  class="slds-line-height_reset">
                        <th class="head_color" scope="col" style="border-top-left-radius: 10px">
                            SL No.
                        </th>
                        <th class="head_color">
                            KPI Parameter
                        </th>
                        <th class="head_color">
                            Target
                        </th>
                        <th class="head_color">
                            Max point
                        </th>
                        <th class="head_color">
                            Actual Value
                        </th >
                        <th class="head_color" style="border-top-right-radius: 10px">
                            Actual Point
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="slds-hint-parent">
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">1</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">CSAT&nbsp;
                            <lightning:helptext content="{!v.kpiMapHelpTexts.csatHelpText}" style="color: #DCDCDC;"/>
                           </div>
                    </td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="CSAT Value">8.5</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">150</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.CSATValueActual,0)}">
                                    <lightning:button variant="base" label='{!v.CSATValueActual}' title="CSAT" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.CSATValueActual,0)}">
                                    <lightning:button variant="base" label="0" title="CSAT" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.CSATValue}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">2</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate info_color">Scope Planning
                            <lightning:helptext title="" content="{!v.kpiMapHelpTexts.scopeHelpText + v.kpiMapHelpTexts.scopeHelpText1}" style="color: #DCDCDC;"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="Hours">{!v.kpiMapTargets.planned} </div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">100</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.projectScopeActual,0)}">
                                    <lightning:button variant="base" label='{!v.projectScopeActual}' title="Scope" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.projectScopeActual,0)}">
                                    <lightning:button variant="base" label="0" title="Scope" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.projectScope}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">3</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">Project schedule
                                <lightning:helptext content="{!v.kpiMapHelpTexts.projectScheduleHelpText}"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="Project Schedule Date">{!v.kpiMapTargets.projectActualDate}</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">100</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.projectScheduleActual,0)}">
                                    <lightning:button variant="base" label='{!v.projectScheduleActual}' title="Project Schedule" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.projectScheduleActual,0)}">
                                    <lightning:button variant="base" label="0" title="Project Schedule" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.projectSchedule}</div></td>
                    </tr><tr>
                    <td data-label="SL No.">
                        <div class="slds-truncate" title="SL No.">4</div></td>
                    <td data-label="KPI Parameter">
                        <div class="slds-truncate">Task schedule
                        <lightning:helptext content="{!v.kpiMapHelpTexts.projectScheduleHelpText}"/>
                            </div></td>
                    <td data-label="Target">
                        <div class="slds-truncate" title="Total Number of Tasks">70</div></td>
                    <td>50</td>
                    <td data-label="Actual Value">
                        <div class="slds-truncate" title="Actual Value">
                            <aura:if isTrue="{!greaterthan(v.taskScheduleActual,0)}">
                                <lightning:button variant="base" label='{!v.taskScheduleActual}' title="Task Schedule" onclick="{! c.openModel }"/>
                            </aura:if>
                            <aura:if isTrue="{!lessthanorequal(v.taskScheduleActual,0)}">
                                <lightning:button variant="base" label="0" title="Task Schedule" onclick="{! c.openModel }"/>
                            </aura:if>
                        </div></td>
                    <td data-label="Actual Point">
                        <div class="slds-truncate" title="Actual Point">{!v.taskSchedule}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">5</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">Quality efforts
                            <lightning:helptext content="{!v.kpiMapHelpTexts.qualityEffortHelpText}"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="Total number of Test Cases">{!v.kpiMapTargets.totalReqCount}</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">50</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.qEffortActual,0)}">
                                    <lightning:button variant="base" label='{!v.qEffortActual}' title="Quality Effort" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.qEffortActual,0)}">
                                    <lightning:button variant="base" label="0" title="Quality Effort" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.qEffort}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">6</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">Cost of Rework
                            <lightning:helptext content="{!v.kpiMapHelpTexts.costOfQualityHelpText}"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="In hours">{!v.kpiMapTargets.costOfQuality}</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">100</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.costOfQualityActual,0)}">
                                    <lightning:button variant="base" label='{!v.costOfQualityActual}' title="Cost of Quality" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.costOfQualityActual,0)}">
                                    <lightning:button variant="base" label="0" title="Cost of Quality" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.costOfQuality}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">7</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">Budget
                            <lightning:helptext content="{!v.kpiMapHelpTexts.budgetHelpText}"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="Budget Hours">{!v.kpiMapTargets.totalBudget}</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">50</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.budgetActual,0)}">
                                    <lightning:button variant="base" label='{!v.budgetActual}' title="Budget" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.budgetActual,0)}">
                                    <lightning:button variant="base" label="0" title="Budget" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.budget}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">8</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">Gross margin
                            <lightning:helptext content="{!v.kpiMapHelpTexts.grossMarginHelpText}"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="In hours">{!v.kpiMapTargets.grossMargin}</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">50</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.gMarginActual,0)}">
                                    <lightning:button variant="base" label='{!v.gMarginActual}' title="Gross Margin" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.gMarginActual,0)}">
                                    <lightning:button variant="base" label="0" title="Gross Margin" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.gMargin}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No.">
                            <div class="slds-truncate" title="SL No.">9</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">On time invoice
                            <lightning:helptext content="{!v.kpiMapHelpTexts.onTimeInvoiceHelpText}"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="Invoice ">OnTime</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">50</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.onTimeInvoiceActual,0)}">
                                    <lightning:button variant="base" label='{!v.onTimeInvoiceActual}' title="On Time Invoice" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.onTimeInvoiceActual,0)}">
                                    <lightning:button variant="base" label="0" title="On Time Invoice" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point">
                            <div class="slds-truncate" title="Actual Point">{!v.onTimeInvoice}</div></td>
                    </tr>
                    <tr>
                        <td data-label="SL No." style="border-bottom-left-radius: 10px">
                            <div class="slds-truncate" title="SL No.">10</div></td>
                        <td data-label="KPI Parameter">
                            <div class="slds-truncate">Documentation
                            <lightning:helptext content="{!v.kpiMapHelpTexts.projectScheduleHelpText}"/>
                            </div></td>
                        <td data-label="Target">
                            <div class="slds-truncate" title="Number of documentation">5</div></td>
                        <td data-label="Max point">
                            <div class="slds-truncate" title="Max point">50</div></td>
                        <td data-label="Actual Value">
                            <div class="slds-truncate" title="Actual Value">
                                <aura:if isTrue="{!greaterthan(v.documentsActual,0)}">
                                    <lightning:button variant="base" label='{!v.documentsActual}' title="Documentation" onclick="{! c.openModel }"/>
                                </aura:if>
                                <aura:if isTrue="{!lessthanorequal(v.documentsActual,0)}">
                                    <lightning:button variant="base" label="0" title="Documentation" onclick="{! c.openModel }"/>
                                </aura:if>
                            </div></td>
                        <td data-label="Actual Point" style="border-bottom-right-radius: 10px">
                            <div class="slds-truncate" title="Actual Point">{!v.documents}
                                
                            </div></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
        </div>
        </body>

</aura:component>



ProjctPerformance.js controller :::::::::


({
    onfocus : function(component,event,helper){
        $A.util.addClass(component.find("mySpinner"), "slds-show");
        var forOpen = component.find("searchRes");
        $A.util.addClass(forOpen, 'slds-is-open');
        $A.util.removeClass(forOpen, 'slds-is-close');
        var getInputkeyWord = '';
        helper.searchHelper(component,event,getInputkeyWord);
    },
    onblur : function(component,event,helper){       
        component.set("v.listOfSearchRecords", null );
        var forclose = component.find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
    },
    keyPressController : function(component, event, helper) {
        var getInputkeyWord = component.get("v.SearchKeyWord");
        var objectName = component.get('v.objectAPIName');   
        if( getInputkeyWord.length > 0 ){
            var forOpen = component.find("searchRes");
            $A.util.addClass(forOpen, 'slds-is-open');
            $A.util.removeClass(forOpen, 'slds-is-close');
            if(objectName == 'UserQueue') {
                helper.searchUserQueue(component, event, getInputkeyWord);
            } else {
                helper.searchHelper(component, event, getInputkeyWord);
            }
        }
        else{  
            component.set("v.listOfSearchRecords", null ); 
            var forclose = component.find("searchRes");
            $A.util.addClass(forclose, 'slds-is-close');
            $A.util.removeClass(forclose, 'slds-is-open');
        }
    },
    // function for clear the Record Selaction 
    clear :function(component,event,heplper){
        var pillTarget = component.find("lookup-pill");
        var lookUpTarget = component.find("lookupField"); 
        
        $A.util.addClass(pillTarget, 'slds-hide');
        $A.util.removeClass(pillTarget, 'slds-show');
        
        $A.util.addClass(lookUpTarget, 'slds-show');
        $A.util.removeClass(lookUpTarget, 'slds-hide');
        
        component.set("v.SearchKeyWord",null);
        component.set("v.listOfSearchRecords", null );
        component.set("v.selectedRecord", {} );
        component.set("v.listOfSearchRecords",null);
    },
    // This function call when the end User Select any record from the result list.   
    handleComponentEvent : function(component, event, helper) {
        // get the selected Account record from the COMPONETN event 	 
        var selectedAccountGetFromEvent = event.getParam("recordByEvent");
        component.set("v.selectedRecord" , selectedAccountGetFromEvent); 
        //alert(selectedAccountGetFromEvent.Name);
        component.set("v.CSATValue",null)
        component.set("v.projectScope", null);
        component.set("v.projectSchedule", null);
        component.set("v.taskSchedule", null);  
        component.set("v.qEffort", null);
        component.set("v.costOfQuality", null); 
        component.set("v.budget", null);
        component.set("v.documents", null);
        component.set("v.onTimeInvoice", null);
        component.set("v.gMargin", null);
        document.getElementById("myProgress").value = 0;
        document.getElementById("totalVal").innerHTML='';
        document.getElementById("totalVal").style.width=0+"%";
        document.querySelector(".onestar").style.color="#404260";
        document.querySelector(".twostar").style.color="#404260";
        document.querySelector(".threestar").style.color="#404260";
        document.querySelector(".fourstar").style.color="#404260";
        document.querySelector(".fivestar").style.color="#404260";
            for(var i=1; i<=5; i++) {
                    document.querySelector(".overall_"+i).style.color="#404260";
                  
                }
        component.set("v.CSATValueActual", null)
        component.set("v.projectScopeActual", null);
        component.set("v.projectScheduleActual",null);
        component.set("v.taskScheduleActual", null);  
        component.set("v.qEffortActual", null);
        component.set("v.costOfQualityActual", null); 
        component.set("v.budgetActual", null);
        component.set("v.documentsActual", null);
        component.set("v.onTimeInvoiceActual", null);
        component.set("v.gMarginActual", null);
        
        var forclose = component.find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = component.find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show');  
    },
    getKPIDetails : function(component,event,helper){
        debugger;
        var project=component.get('v.selectedRecord');
       // if(project.Id != null || project.Id != undefined){
            //alert(component.get('v.recordId'));
            helper.getHelpText(component,event,helper);
            helper.getKPIDetailsHelper(component,event,helper); 
            helper.getDetails(component,event,helper);
	        helper.getTargets(component,event,helper);
      /*  }
        else{
            alert('please select project');
        }*/
        
    },
    handleSelect : function (component, event, helper) {
        var stepName = event.getParam("detail").value;
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
            "title": "Success!",
            "message": "Toast from " + stepName
        });
        toastEvent.fire();
    },
    toggleStep4: function (cmp) {
        cmp.set('v.showStep4', !cmp.get('v.showStep4'));
    }
    ,
    openModel: function(component, event, helper) {
        // for Display Model,set the "isOpen" attribute to "true"
        //alert(event.getSource().get("v.title"));
        //helper.getDetails(component,event,helper);
        var recTempId = component.get("v.recordId");
        alert('recTempId>>>'+recTempId);
        helper.getDetails(component, event, helper);                        //
    /*    component.set("v.isOpen", true);												// commented by Ranvir
        var result = component.get('v.showDetailsMap');
        component.set('v.KPIParameter',event.getSource().get("v.title"));
        component.set('v.showDetails',result[event.getSource().get("v.title")]);
        for(var key in result) {
            if(result.hasOwnProperty(key)) {
                var value = result[key];
                console.log(value);
                console.log(key);
                //do something with value;
            }
        }
       */ 
        
    },
    
    closeModel: function(component, event, helper) {
        // for Hide/Close Model,set the "isOpen" attribute to "Fasle"  
        component.set("v.isOpen", false);
    },
    
    likenClose: function(component, event, helper) {
        // Display alert message on the click on the "Like and Close" button from Model Footer 
        // and set set the "isOpen" attribute to "False for close the model Box.
        alert('thanks for like Us :)');
        component.set("v.isOpen", false);
    },
})





ProjctPerformance.js  helper 


({
    searchHelper : function(component,event,getInputkeyWord) {
        var action = component.get("c.fetchLookUpValues");
        action.setParams({
            'searchKeyWord': getInputkeyWord,
            'ObjectName' : component.get("v.objectAPIName")
        });
        action.setCallback(this, function(response) {
            $A.util.removeClass(component.find("mySpinner"), "slds-show");
            var state = response.getState();
            if (state === "SUCCESS") {
                var storeResponse = response.getReturnValue();
                if (storeResponse.length == 0) {
                    component.set("v.Message", 'No Result Found...');
                } else {
                    component.set("v.Message", '');
                }
                component.set("v.listOfSearchRecords", storeResponse);
            }
        });
        $A.enqueueAction(action);
    },
    searchUserQueue  : function(component,event,getInputkeyWord) {
        var action = component.get("c.fetchUserQueueValues");
        action.setParams({
            'searchKeyWord': getInputkeyWord,
        });
        action.setCallback(this, function(response) {
            $A.util.removeClass(component.find("mySpinner"), "slds-show");
            var state = response.getState();
            if (state === "SUCCESS") {
                var storeResponse = response.getReturnValue();
                if (storeResponse.length == 0) {
                    component.set("v.Message", 'No Result Found...');
                } else {
                    component.set("v.Message", '');
                }
                component.set("v.listOfSearchRecords", storeResponse);
            }
        });
        $A.enqueueAction(action);
    },
    getKPIDetailsHelper : function(component,event,helper){
        var csatValues=component.get('v.CSATValue');
        var project=component.get('v.selectedRecord');
        //alert('calling alert of helper' +csatValues);
        var action = component.get("c.getCSATValues");
        //alert(project.Name);
        action.setParams({
            'projectId':  component.get('v.recordId')//project.Id,
        });
        
        
        
        
        action.setCallback(this, function(response) {
            $A.util.removeClass(component.find("mySpinner"), "slds-show");
            var state = response.getState();
            if (state === "SUCCESS") {
                var storeResponse = response.getReturnValue();
                /*if (storeResponse.length == 0) {
                    component.set("v.Message", 'No Result Found...');
                } else {
                    component.set("v.Message", '');
                }*/
                component.set("v.CSATValue", storeResponse[0][0])
                component.set("v.projectScope", storeResponse[0][1]);
                component.set("v.projectSchedule", storeResponse[0][2]);
                component.set("v.taskSchedule", storeResponse[0][3]); 
                //alert(component.set("v.taskSchedule", storeResponse[0][3]));
                component.set("v.qEffort", storeResponse[0][4]);
                component.set("v.costOfQuality", storeResponse[0][5]); 
                component.set("v.budget", storeResponse[0][6]);
                component.set("v.documents", storeResponse[0][7]);
                component.set("v.onTimeInvoice", storeResponse[0][8]);
                component.set("v.gMargin", storeResponse[0][10]);
                component.set('v.BudgetedHours',storeResponse[0][14]);
                component.set("v.CSATValueActual", storeResponse[1][0])
                component.set("v.projectScopeActual", storeResponse[1][1]);
                component.set("v.projectScheduleActual", storeResponse[1][2]);
                component.set("v.taskScheduleActual", storeResponse[1][3]);
                //alert(storeResponse[1][3]);
                component.set("v.qEffortActual", storeResponse[1][4]);
                component.set("v.costOfQualityActual", storeResponse[1][5]); 
                component.set("v.budgetActual", storeResponse[1][6]);
                component.set("v.documentsActual", storeResponse[1][7]);
                component.set("v.onTimeInvoiceActual", storeResponse[1][8]);
                component.set("v.gMarginActual", storeResponse[1][10]);
                //console.log(storeResponse);
                for(var y=0;y<storeResponse.length;y++){
                    for(var k=0;k<storeResponse[y].length;k++){
                        console.log('Value is '+storeResponse[y][k]);
                    }
                }
                
                var total=0;
                for( var i=0;i<9;i++){
                    console.log(storeResponse[0][i]);
                    total+=storeResponse[0][i];
                }
                total+=storeResponse[0][10];
                console.log(storeResponse[0][10]);
                document.getElementById("myProgress").value = total;
                console.log(total);
                var Ptg=(total*100)/750;
                document.getElementById("totalVal").style.width=Ptg+"%";
                document.getElementById("totalVal").style.color="#086b08";
                document.getElementById("totalVal").style.fontSize ="16px";
                document.getElementById("totalVal").style.fontWeight="bold";
                document.getElementById("totalVal").innerHTML=total;
                var totalValue=750;
                var twentyperc=(20*totalValue)/100;
                var fourthyperc=(40*totalValue)/100;
                var sixthyperc=(60*totalValue)/100;
                var eigthyperc=(80*totalValue)/100;
                if(total>=twentyperc) {
                    document.querySelector(".onestar").style.color="yellow";
                    console.log(twentyperc);
                    console.log(total);
                }
                if(total>=fourthyperc) {
                   
                        document.querySelector(".twostar").style.color="yellow";
                    console.log(twentyperc);
                }
                if(total>=sixthyperc) {
                    for(var i=1; i<=3; i++)
                        document.querySelector(".threestar").style.color="yellow";
                }
                if(total>=eigthyperc) {
                    for(var i=1; i<=4; i++)
                        document.querySelector(".fourstar").style.color="yellow";
                }
                if(total>=totalValue) {
                    for(var i=1; i<=5; i++)
                        document.querySelector(".fivestar").style.color="yellow";
                }
                
                if(total>=twentyperc) {
                    document.querySelector(".onestar").style.color="yellow";
                    console.log(twentyperc);
                    console.log(total);
                }
                 /*if(total>=fourthyperc) {
                     for(var i=1; i<=2; i++)
                    document.querySelector(".overall_"+i).style.color="yellow";
                     console.log(twentyperc);
                }
                if(total>=sixthyperc) {
                     for(var i=1; i<=3; i++)
                    document.querySelector(".overall_"+i).style.color="yellow";
                }
                if(total>=eigthyperc) {
                     for(var i=1; i<=4; i++)
                    document.querySelector(".overall_"+i).style.color="yellow";
                }
                if(total>=totalValue) {
                     for(var i=1; i<=5; i++)
                    document.querySelector(".overall_"+i).style.color="yellow";
                }*/
                //alert(storeResponse[9])
                //alert('Test Data'+storeResponse);
                
                //    helper.getDetails(component,event,helper);
                
                
                
            }
        });
        $A.enqueueAction(action);
    },
    
    getDetails : function(component,event,helper){
        debugger;
        var str = '';
        str = component.get('c.getCalculatedData');
        var action = component.get('c.getCalculatedData');
        action.setParams({
            'projectId' : component.get("v.recordId") 
        });
        
        action.setCallback(this,function(response){
            var state = response.getState();
            var result={};
            
            if(state==='SUCCESS'){
                result = response.getReturnValue();
                console.log('333333gfgf3 ' + result.length);
                console.log(result);
                console.log(typeof result);
                component.set('v.showDetailsMap',result);
                console.log(typeof component.get('v.showDetailsMap'))
                
                console.log(component.get('v.showDetailsMap')+ ' Testing Map Values');
                //component.set('v.showDetails',result[1]);   
                            
            }
            
         
      /*      
            var result = component.get('v.showDetailsMap');
            component.set('v.KPIParameter',event.getSource().get("v.title"));
            component.set('v.showDetails',result[event.getSource().get("v.title")]);
            for(var key in result) {
                if(result.hasOwnProperty(key)) {
                    var value = result[key];
                    console.log(value);
                    console.log(key);
                    //do something with value;
                }
            }
        */    
            
            
            
        });
        $A.enqueueAction(action);
    },
    getHelpText : function(component,event,helper){
        var action = component.get('c.getHelpTexts');
        action.setCallback(this,function(response){
            if(response.getState() === "SUCCESS") {
               component.set('v.kpiMapHelpTexts',response.getReturnValue()); 
            }
        });
        $A.enqueueAction(action);
    },
     getTargets : function(component,event,helper){
        var action = component.get('c.getTargets');
        action.setCallback(this,function(response){
            if(response.getState() === "SUCCESS") {
               component.set('v.kpiMapTargets',response.getReturnValue()); 
                alert(component.get('v.kpiMapTargets')['planned']);
            }
        });
        $A.enqueueAction(action);
    }
})





Projectperformance.css ::::::::


.THIS .leftPaddingClass {
    padding-left: 2rem;
}
.THIS.redOnYellow svg {
    fill : red;
} 
.THIS .pillSize{
    width:100%;
}
.THIS #myProgress {
    width: 100%;
    background-color: #ddd;
}
.THIS .head_color {
    background:whitesmoke;
}
.THIS .slds-button__icon {
        color: #b3b3b3;
}
/*.THIS .silver[data-value] {
position:relative;
}
.THIS .silver[data-value]:after {
content: 'Stage-1 250';
position: absolute;
right: 0;

}
.THIS .gold[data-value] {
position:relative;
}
.THIS .gold[data-value]:after {
content: 'Stage-2 450';
position: absolute;
right: 0;
top:-14px;
}
.THIS .platinum[data-value] {
position:relative;
}
.THIS .platinum[data-value]:after {
content: 'Stage-3 700';
position: absolute;
right: 0;
top:-14px;
}*/

.THIS .my_progress_bar {
    height: 29px;
}




